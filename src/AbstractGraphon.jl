
"""
    AbstractGraphon

The abstract type for all graphons.
"""
abstract type AbstractGraphon end


"""
    NodeSampler

The abstract type for graphon node sampling methods.
"""
abstract type NodeSampler end

"""
    ExchangeableNodes <: NodeSampler

Sample node latent variables uniformly in [0,1)

For use with [`random_graph`](@ref).

NB. A graph generated using this is said to be *node-exchangeable*.
"""
struct ExchangeableNodes <: NodeSampler end
sample_nodes(n::Integer, ::Type{ExchangeableNodes}, rng=GLOBAL_RNG) = rand(rng, n)

"""
    DeterministicNodes

Sample node latent variables deterministically using points sampled at regular intervals.

For use with [`random_graph`](@ref)
"""
struct DeterministicNodes <: NodeSampler end
sample_nodes(n::Integer, ::Type{DeterministicNodes}, rng=nothing) = LinRange(0.0, 1.0, n)

"""
    random_graph(gr::AbstractGraphon, n::Integer, T::Type{<:NodeSampler}, [rng])

Sample a random graph of `n` vertices from the graphon `gr`.

The random graph is generated by sampling `n` latent variables `x[1], ..., x[n]`, and adding an edge between vertices `i` and `j` with independent probability `gr(x[i], x[j])`.

How the latent variables are generated is controlled by the `T` parameter. See [`ExchangeableNodes`](@ref) and [`DeterministicNodes`](@ref).

An rng object can be passed optionally.

## Examples

"""
function random_graph(gr::AbstractGraphon, n::Integer, T::Type{<:NodeSampler} = ExchangeableNodes, rng=GLOBAL_RNG)
x = sample_nodes(n, T, rng)
g = SimpleGraph(n)
for i in eachindex(x), j in i+1:lastindex(x)
    if rand(rng) < gr(x[i], x[j])
        add_edge!(g, i, j)
    end
end
return g
end